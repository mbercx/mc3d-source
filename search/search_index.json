{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The <code>mc3d-source</code> package hosts all the code for MC3D-source pipeline, which produces the unique set of structures that are the starting point for all MC3D calculations.</p>"},{"location":"#pipeline","title":"Pipeline","text":"<p>The following flowchart is from our MC3D Figma board, and helps to understand the steps taken to obtain the MC3D-source:</p> <p></p>"},{"location":"developer/","title":"Developer Guide","text":""},{"location":"developer/#hatch","title":"Hatch","text":"<p>We use Hatch to set up environments and scripts for most developer tasks. To see a table of the available environments and their scripts, run:</p> <pre><code>hatch env show\n</code></pre>"},{"location":"developer/#documentation","title":"Documentation","text":"<p>The easiest way to work on the documentation is to start the server locally via:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>And go to the provided URL. If you only want to build the documentation locally, there is also a script for that:</p> <pre><code>hatch run docs:build\n</code></pre> <p>A GitHub action is set up to automatically deploy the documentation to GitHub Pages. See the corresponding GitHub Pages documentation for the steps required.</p>"},{"location":"developer/#pre-commit","title":"Pre-commit","text":"<p>You can install the pre-commit hooks with:</p> <pre><code>hatch run precommit:install\n</code></pre> <p>Or run them via:</p> <pre><code>hatch run precommit:run\n</code></pre> <p>From the extensive Ruff ruleset that Hatch uses, we ignore the following globally:</p> Code Rule Rationale / Note <code>TRY003</code> raise-vanilla-args Formatting warning/exception messages beforehand makes the code less readable, for a minor benefit in readability of the exception. <code>EM101</code> raw-string-in-exception Same as <code>TRY003</code> <code>EM102</code> f-string-in-exception Same as <code>TRY003</code> <code>PLR2004</code> magic-value-comparison We have a lot of \u201cmagic values\u201d to compare with in scientific code; naming them all would reduce readability for little benefit. <code>FBT002</code> boolean-default-value-positional-argument We understand the concept, but adhering to this rule is not a small change in syntax; disable for now. <code>TID252</code> relative-imports We don\u2019t mind relative imports; as long as you don\u2019t go up a level, they\u2019re more readable (less verbose). <p>And the following rules for the files in the <code>tests</code> directory:</p> Code Rule Rationale / Note <code>INP001</code> implicit-namespace-package When tests are not part of the package, there is no need for <code>__init__.py</code> files. <code>S101</code> assert Asserts should not be used in production environments, but are fine for tests."},{"location":"developer/#tests","title":"Tests","text":"<p>Tests are written using the <code>pytest</code> package. They can be run using:</p> <pre><code>hatch run tests:run\n</code></pre>"},{"location":"topics/","title":"Topics","text":"<p>This is a collection of notes that discuss the approach to various steps of the MC3D-source pipeline.</p>"},{"location":"topics/#curate","title":"Curate","text":"<p>Starting from each <code>CifCleanWorkChain</code>, add several details to the extras of the parsed <code>StructureData</code>:</p> <ol> <li>Add the source from the raw CIF to all <code>StructureData</code> under <code>source</code>.</li> <li>Add the spacegroup number of the cleaned CIF to all <code>StructureData</code> under <code>cif_spacegroup_number</code>.</li> <li>Check if the structure has partial occupancies and add that boolean under <code>partial_occupancies</code>.</li> <li>Check if the <code>CifCleanWorkChain</code> had an exit code corresponding to a formula mismatch and add the corresponding     extra to <code>incorrect_formula</code>.</li> </ol> <p>Finally, stoichiometric structures without formula mismatch issues are considered \"curated\", i.e. can be considered for the uniqueness analysis.</p>"},{"location":"topics/#update","title":"Update","text":"<p>This section discusses our approach for \"updating\" an import, i.e. you do a fresh import from a source database that you already imported structures from previously.</p> <p>Warning</p> <p>These notes are based on the new MPDS import, where all versions are updated. This will have to be changed for other imports (e.g. COD) where the versions for some structures may not have changed.</p>"},{"location":"topics/#import-and-process-the-new-set-of-structures","title":"Import and process the new set of structures","text":"<p>First steps are to:</p> <ol> <li>Do a full import of all the raw <code>CifData</code>.</li> <li>Run the <code>CifCleanWorkChain</code> for all of them.</li> <li>\"Curate\" the structures with <code>mc3d-source curate</code>.</li> </ol> <p>This will result in a group of \"curated\" structures, let's call it <code>mpds/v2/structure/curated</code>.</p>"},{"location":"topics/#update-the-list-of-curated-structures","title":"Update the list of curated structures","text":"<p>We want to update the list of curated structures from the previous import (e.g. <code>mpds/v1/structure/curated</code>) using the new import.</p> <p>The steps are:</p> <ol> <li>Loop over the new curated <code>StructureData</code>. If there is structure with the same ID in the old curated group, add it to <code>mpds/v2/structure/final</code>.</li> <li>If there is a corresponding entry, check for similarity:</li> <li>If similar, no point in updating: take the <code>v1</code> structure and add it to <code>mpds/v2/structure/final</code>.</li> <li>If not, take the <code>v2</code> structure and add it to <code>mpds/v2/structure/final</code>.</li> </ol> <p>This deals with the following cases:</p> <ol> <li>If the entry was removed by the MPDS, it will not be in <code>mpds/structure/latest</code>. Only IDs that are currently still in the MPDS will be in <code>mpds/structure/latest</code>.</li> <li>If the entry update doesn't generate a significantly different structure, the old source is preserved.</li> <li>If the entry update does generate a new structure (i.e. doesn't match), the version is updated.</li> </ol> <p>One case that is missed is when the <code>CifCleanWorkChain</code> failed for the new import, but succeeded for the old one. If this happens, we want to still keep the old version, unless it was since removed by the MPDS.</p>"},{"location":"topics/#deprecation","title":"Deprecation","text":"<p>Here we discuss the process of \"deprecating\" sources and MC3D IDs. This means that they are no longer valid for some reason, and need to be flagged/removed from the frontend, and no longer considered when building the unique families of duplicates.</p>"},{"location":"topics/#sources","title":"Sources","text":"<p>Reasons to deprecate a source include:</p> <ul> <li><code>id_removed</code>: The corresponding ID has been removed from the source database.</li> <li><code>structure_updated</code>: The corresponding ID has a different structure in a newer version of the database</li> <li><code>incorrect_formula</code>: The structure of the corresponding ID had a formula mismatch between the cleaned CIF and the parsed structure.</li> </ul>"},{"location":"topics/#mc3d-ids","title":"MC3D-IDs","text":"<p>When all of the sources in the corresponding family are deprecated, an MC3D ID is considered \"fully\" deprecated.</p> <p>Note</p> <p>This means when a structure we ran (aka golden structure) might be deprecated, but the MC3D ID is not. We instead put a warning, but keep the structure findable.</p>"},{"location":"usage/","title":"User Guide","text":"<p>The <code>mc3d-source</code> package comes with a CLI that takes care of most steps required to construct the MC3D-source. After installing, run:</p> <pre><code>mc3d-source --help\n</code></pre> <p>To get an overview of the commands.</p>"}]}